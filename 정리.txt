관심사의 분리
- 관심이 같은것끼리 모으고 관심이 다른 것은 따로 떨어져 있게 하는 것
- 관심이 같은 것끼리는 하나의 객체 안으로 또는 친한 객체로 모이게하고 관심이 다른 것은 가능한 한 따로
  떨어져서 서로 영향을 주지 않도록 분리
  
 리팩토링
 - 기존의 코드를 외부의 동작방식에는 변화 없이 내부 구조를 변경하여 재구성하는 작업
 - 코드 이해하기가 편하고 변화에 효율적
 - 생산성 증가, 코드의 품질 증가, 유지보수 용이, 견고하고 유연한 제품
 
 템플릿 메소드 패턴
 - 상속을 통해 슈퍼클래스의 기능을 확장할 떄 사용하는 방법
 - 변하지 않는 기능은 슈퍼클래스에 만들어두고 자주 변경 되며 확장할 기능은 서브클래스에서 만든다
 
 팩토리 메소드 패턴
 - 상속을 통해 기능을 확장
 - 슈퍼클래스 코드는 서브클래스에서 구현할 메소드를 호출해서 필요한 타읩으 오브젝트를 가져와 사용 
 - 인터페이스 타입으로 오브젝트를 리턴
   -> 어떤 클래스의 오브젝트를 만들어 리턴할지는 모름 (관심도 없음)
 - 서브클래스에서 오브젝트 생성 방법과 클래스를 결정할 수 있도록 미리 정해둔 메소드를 팩토리 메소드
 - 슈퍼클래스의 기본 코드에서 독립시키는 방법
 
 추상화
 - 어떤 것들의 공통적이 성격을 뽑아내어 이를 따로 분리해내는 작업
 
 객체지향 설계원칙 SOLID 5가지
 
 응집도
 - 변화가 일어날 떄 해당 모듈에서 변화하는 부분이 높아지고 낮아지는 것
 - 변화하면 많은 부분이 변화된다
 
 결합도
 - 하나의 오브젝트가 변경이 일어날 때 관계를 맺고 있는 다른 오브젝트에게 변화를 요구하는 정도
 
 전략패턴
 - 필요에 따라 변경이 필요한 알고리즘을 인터페이스를 통째로 외부로 분리시키고 
   이를 구현한 구체적인 알고리즘 클래스를 필요에 따라 바꿔서 사용앟ㄹ 수 있게 하는 패턴
       

 